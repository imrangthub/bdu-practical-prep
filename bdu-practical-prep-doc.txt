

spring-jasper-reports


MySql
=============================

Mysql Config 
-----------------------------
mysqld --verbose --help | grep -A 1 "Default options"
Find active config file

/etc/mysql/my.cnf
/usr/local/mysql/etc/my.cnf
C:\Program Files\MySQL\MySQL Server <version>\my.ini
C:\Program Files\MySQL\MySQL Server <version>\my.cnf
C:\Windows\my.ini

Debian/Ubuntu: /etc/mysql/mysql.conf.d/mysqld.cnf
RedHat/CentOS/Fedora: /etc/my.cnf or /etc/mysql/my.cnf


MysqlLogging
-----------------------------
1. ErrorLogLocation:The error log contains information about errors that occur while the server is running. It is particularly useful for diagnosing issues with the server itself.
SHOW VARIABLES LIKE 'log_error';
Error Log
Default Location (Linux): /var/log/mysql/error.log or /var/log/mysqld.log
Default Location (Windows): C:\ProgramData\MySQL\MySQL Server <version>\Data\

2. General Query Log: The general query log contains a record of when clients connect or disconnect, and what queries they execute.
SET GLOBAL general_log = 'ON';
 SHOW VARIABLES LIKE 'general_log%';
SET GLOBAL general_log_file = '/path/to/query.log';


3. Binary Log
The binary log contains all statements that change data. It's crucial for replication and data recovery.

Default Location (Linux): /var/lib/mysql/ (files named binlog.xxxxxx)
Default Location (Windows): C:\ProgramData\MySQL\MySQL Server <version>\Data\
SHOW VARIABLES LIKE 'log_bin';
SHOW BINARY LOGS;

4. Slow Query Log
The slow query log contains queries that took longer than long_query_time to execute.
The long_query_time variable in MySQL is a configuration setting that determines the threshold time for logging slow queries. 
Default Value: The default value for long_query_time is 10 seconds.
SHOW VARIABLES LIKE 'long_query_time';


Default Location (Linux): /var/lib/mysql/ (named hostname-slow.log)
Default Location (Windows): C:\ProgramData\MySQL\MySQL Server <version>\Data\
Check and enable:
SHOW VARIABLES LIKE 'slow_query_log%';
SET GLOBAL slow_query_log = 'ON';
SET GLOBAL slow_query_log_file = '/path/to/slow-query.log';

5. InnoDB Log
InnoDB, the default storage engine, keeps its own logs for transaction purposes.
SHOW ENGINE INNODB STATUS;






Angular 17 project on Ubuntu
=============================
Run anguarar app:angularui4-rest-crud-book

ng new angularui4-rest-crud-book
cd angularui4-rest-crud-book

Install Required Packages
npm install @angular/forms @angular/common @angular/platform-browser @angular/router



create service 
ng g s services/book --module=app.module


Create the Book Service
 ng generate service services/book

 
Create Book Components
ng generate component book-list
ng generate component book-create
ng generate component book-edit
ng generate component book-detail





Install angular
----------------------------
# Install Node.js and npm
curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
sudo apt-get install -y nodejs
node -v
npm -v


# Install Angular CLI
sudo npm install -g @angular/cli@17
ng version


# Create a new Angular project
ng new my-angular-project

# Navigate to the project directory
cd my-angular-project

# Serve the application
ng serve





spring-security-jwt-auth
=============================
curl --location 'localhost:8282/authenticate' \
--header 'Content-Type: application/json' \
--data '{
    "username": "admin",
    "password": "admin"
}'
Generate token

curl --location 'localhost:8282/admin' \
--header 'Authorization: Bearer rwerwsometoken'




spring-security-mvcapp
=============================
USE bdu_practical_prepdb;
INSERT INTO `bdu_practical_prepdb`.roles_tbl (`id`, `description`, `is_deleted`, `name`) VALUES ('99999990', 'Role for Admin', '0', 'ROLE_ADMIN');
INSERT INTO `bdu_practical_prepdb`.roles_tbl (`id`, `description`, `is_deleted`, `name`) VALUES ('99999991', 'Role for Manager', '0', 'ROLE_MANAGER');
INSERT INTO `bdu_practical_prepdb`.roles_tbl (`id`, `description`, `is_deleted`, `name`) VALUES ('99999992', 'Role for User', '0', 'ROLE_USER');








BlogCrud
=============================
INSERT INTO `bdu_practical_prepdb`.`blog_post` (`id`, `category`, `post_body`, `post_image`, `post_title`) VALUES ('2', '1', 'ertertert2', 'ertert2', 'ertetert2');





spring-security-mvcapp



JSP CRUD Example
=============================
Download jstl.jar and mysql-connector.jar
Download jstl1.2.jar file
Download mysql-connector.jar

Pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>simple-jsp-mysql-crud</groupId>
	<artifactId>simple-jsp-mysql-crud</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
	<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
	</properties>
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<port>8080</port>
					<path>/</path>
				</configuration>
			</plugin>
		</plugins>


	</build>
</project>


httpRequest commandline
=============================
Create a new book:
curl -X POST http://localhost:8080/api/books -H "Content-Type: application/json" -d '{"name": "Book One", "type": "Fiction"}'
Get all books:
curl -X GET http://localhost:8080/api/books
Get a book by ID:
curl -X GET http://localhost:8080/api/books/1
Update a book by ID:
curl -X PUT http://localhost:8080/api/books/1 -H "Content-Type: application/json" -d '{"name": "Updated Book One", "type": "Non-Fiction"}'
Delete a book by ID:
curl -X DELETE http://localhost:8080/api/books/1




Tomcat Install
=============================

Download Tomcat as tar stract it and Configure Server properties:
--------------------

Port:
sudo nano /opt/tomcat/conf/server.xml
<Connector port="8080" protocol="HTTP/1.1"
           connectionTimeout="20000"
           redirectPort="8443" />



Configure Users and Roles
sudo nano /opt/tomcat/conf/tomcat-users.xml
<role rolename="manager-gui"/>
<role rolename="admin-gui"/>
<user username="admin" password="password" roles="manager-gui,admin-gui"/>

Restrict Access to the Manager and Host Manager Apps:Comment out the Valve element
sudo nano /opt/tomcat/webapps/manager/META-INF/context.xml
<!--
<Valve className="org.apache.catalina.valves.RemoteAddrValve"
       allow="127\.\d+\.\d+\.\d+|::1" />
-->

sudo nano /opt/tomcat/webapps/host-manager/META-INF/context.xml
<!--
<Valve className="org.apache.catalina.valves.RemoteAddrValve"
       allow="127\.\d+\.\d+\.\d+|::1" />
-->

 
 
 
Start tomcat
cd /opt/tomcat
sudo ./bin/startup.sh
OR
create a service and:
sudo systemctl restart tomcat







MySql
=============================
=>sudo mysql -u root -p
mysql-login

=>service mysql start   
=>systemctl status mysql
=>service mysql stop



Java
=============================
=>which java
=>sudo update-alternatives --display java
Check java

=>sudo update-alternatives --config java
Switch java version


Install java
--------------------------------------------------------
Download tar file then:
sudo tar -zxvf jdk-8u202-linux-x64.tar.gz
mv jdk-8u202-linux-x64 java8

Step 2: Set Up update-alternatives
sudo update-alternatives --install /usr/bin/java java /opt/jdk/jdk8u202/bin/java 1
sudo update-alternatives --install /usr/bin/javac javac /opt/jdk/jdk8u202/bin/javac 1
java -/--version






Remove/Uninstall java from Linux: assuming you have a Java version installed in /opt/jdk
-----------------------------------------------------------
Step1: Check the symbolic links:

ls -l /usr/bin/java
readlink -f /usr/bin/java

ls -l /etc/alternatives/java
readlink -f /etc/alternatives/java

Step2:Remove the symbolic links:

sudo rm /usr/bin/java
sudo rm /etc/alternatives/java

Step3: Remove the Java version from update-alternatives:
sudo update-alternatives --remove java /opt/jdk/bin/java

Finally Delete directory:
sudo rm -rf /opt/jdk














GitHub CICD
=============================
Project->Setting->Secret and Variable
Set Directory
Then .github directory create workflow	
Create file jobfile.yaml file 

name: Upload Website

on:
  push:
    branches:
    - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy static site to S3 bucket
      run: aws s3 sync . s3://drawdine.com --delete




GitLab
----------------------
In project root directory:
.gitlabci.yml

stages:
  - triggers

openapi-cms-current:
  stage: triggers
  trigger:
    include: pipeline/.dev-gitlab-ci.yml
  rules:
    - changes:
        - $CI_COMMIT_BRANCH
    - exists:
        - $CI_COMMIT_BRANCH == "TEST_RELEASE"
        
        

default:
  tags:
    - java

stages:
 - build
 - deploy

gradlebuild:
  image: gradle:alpine
  stage: build
  script:
    - echo "Setting JAVA_HOME"
    - export JAVA_HOME=$JAVA_HOME
    - source /etc/environment
    - gradle clean build
  artifacts:
    paths:
      - build/libs/*.jar

deploy-master:
  before_script:
    - echo "Host= $HOST"
  stage: deploy
  script:
    - sshpass -V
    - export SSHPASS=$PASSWORD
    - sshpass -e scp pipeline/script/* $USER@$HOST:$workdir
    - sshpass -e ssh $USER@$HOST 'cd /app/apihub/v1/mybl/app-management/discovery-eureka && chmod +x killprocess.sh && sh killprocess.sh'
    - sshpass -e scp build/libs/discovery-eureka-*.jar $USER@$HOST:$workdir
    - sshpass -e ssh $USER@$HOST 'cd /app/apihub/v1/mybl/app-management/discovery-eureka && chmod +x deploy-script.sh && sh deploy-script.sh'










